name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本'
        required: true
        default: 'v1.0.0'

# 显式声明权限
permissions:
  contents: write  # 这是创建发布和上传文件所需的权限

jobs:
  # 手动触发时创建标签
  create-tag:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史以确保标签创建正确
          
      - name: Create Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push origin ${{ github.event.inputs.version }}
        
  # 创建发布
  build-and-release:
    needs: [create-tag]
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.version || github.ref_name }}
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.event.inputs.version || github.ref_name }}
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    needs: build-and-release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'
          check-latest: false

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      # 缓存 Go 模块
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\go-build
            ~\go\pkg\mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # 缓存 Wails
      - name: Cache Wails
        id: cache-wails
        uses: actions/cache@v3
        with:
          path: ~\go\bin\wails.exe
          key: ${{ runner.os }}-wails-${{ hashFiles('go.mod') }}

      - name: Install Wails
        if: steps.cache-wails.outputs.cache-hit != 'true'
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.7.1

      # 安装前端依赖
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
        shell: powershell

      - name: Create .env file
        run: |
          echo "MASTER_PASSWORD=${{ secrets.MASTER_PASSWORD }}" > .env
        shell: powershell

      - name: Build for Windows
        run: |
          ./build.ps1
        shell: powershell
        env:
          MASTER_PASSWORD: ${{ secrets.MASTER_PASSWORD }}

      - name: Package Windows build
        run: |
          # 创建打包目录
          mkdir -p release
          # 复制生成的可执行文件和资源
          cp -r build/bin/* release/
          # 创建 ZIP 文件
          Compress-Archive -Path release/* -DestinationPath Euthenticator-windows-${{ github.event.inputs.version || github.ref_name }}.zip
        shell: powershell

      - name: Upload Windows build
        uses: softprops/action-gh-release@v1
        with:
          files: Euthenticator-windows-${{ github.event.inputs.version || github.ref_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'
          check-latest: false

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      # 缓存 Go 模块
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # 缓存 Wails
      - name: Cache Wails
        id: cache-wails
        uses: actions/cache@v3
        with:
          path: ~/go/bin/wails
          key: ${{ runner.os }}-wails-${{ hashFiles('go.mod') }}

      - name: Install Wails
        if: steps.cache-wails.outputs.cache-hit != 'true'
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.7.1

      # 缓存系统依赖
      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/release.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          # 安装 WebKit2GTK 依赖和其他构建必需的包
          sudo apt-get install -y build-essential libgtk-3-dev libglib2.0-dev
          # 尝试安装 WebKit2GTK 4.1 (较新的 Ubuntu 版本)
          sudo apt-get install -y libwebkit2gtk-4.1-dev
          # 创建 webkit2gtk-4.0.pc 的符号链接指向 webkit2gtk-4.1.pc
          # 这解决了 Wails 寻找 webkit2gtk-4.0 但系统只有 webkit2gtk-4.1 的问题
          sudo ln -sf /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.1.pc /usr/lib/x86_64-linux-gnu/pkgconfig/webkit2gtk-4.0.pc
          # 安装其他可能需要的依赖
          sudo apt-get install -y pkg-config

      # 安装前端依赖
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Create .env file
        run: |
          echo "MASTER_PASSWORD=${{ secrets.MASTER_PASSWORD }}" > .env
        shell: bash

      - name: Build for Linux
        run: |
          chmod +x ./build.sh
          ./build.sh
        shell: bash
        env:
          MASTER_PASSWORD: ${{ secrets.MASTER_PASSWORD }}

      - name: Package Linux build
        run: |
          # 创建打包目录
          mkdir -p release
          # 复制生成的可执行文件和资源
          cp -r build/bin/* release/
          # 创建压缩文件
          tar -czvf Euthenticator-linux-${{ github.event.inputs.version || github.ref_name }}.tar.gz -C release .

      - name: Upload Linux build
        uses: softprops/action-gh-release@v1
        with:
          files: Euthenticator-linux-${{ github.event.inputs.version || github.ref_name }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}